import { prisma } from '../src/lib/prisma';

async function main() {
  console.log('üîç Verificando nombres de provincias...\n');

  // Obtener todas las provincias √∫nicas
  const surveys = await prisma.survey.findMany({
    where: { scope: 'PROVINCIAL' },
    select: { province: true }
  });

  const provinces = [...new Set(surveys.map(s => s.province))].sort();

  console.log('üìã Provincias encontradas:', provinces.length);
  provinces.forEach(p => {
    const count = surveys.filter(s => s.province === p).length;
    console.log(`  - ${p}: ${count} encuestas`);
  });

  console.log('\nüîß Normalizando nombres duplicados...\n');

  // Normalizar "Ciudad Aut√≥noma de Buenos Aires" a "CABA"
  const cabaLong = await prisma.survey.count({
    where: { province: 'Ciudad Aut√≥noma de Buenos Aires' }
  });

  if (cabaLong > 0) {
    console.log(`üìù Convirtiendo ${cabaLong} encuestas de "Ciudad Aut√≥noma de Buenos Aires" a "CABA"...`);

    const result = await prisma.survey.updateMany({
      where: { province: 'Ciudad Aut√≥noma de Buenos Aires' },
      data: { province: 'CABA' }
    });

    console.log(`‚úÖ Actualizadas ${result.count} encuestas`);
  } else {
    console.log('‚úÖ No hay encuestas con "Ciudad Aut√≥noma de Buenos Aires"');
  }

  // Verificar el resultado
  console.log('\nüìä Resultado final:');
  const finalSurveys = await prisma.survey.findMany({
    where: { scope: 'PROVINCIAL' },
    select: { province: true }
  });

  const finalProvinces = [...new Set(finalSurveys.map(s => s.province))].sort();
  console.log(`Total de provincias √∫nicas: ${finalProvinces.length}`);

  finalProvinces.forEach(p => {
    const count = finalSurveys.filter(s => s.province === p).length;
    console.log(`  - ${p}: ${count} encuestas`);
  });

  // Verificar provincias que deber√≠an tener datos pero no tienen
  const expectedProvinces = [
    'Buenos Aires', 'CABA', 'Catamarca', 'Chaco', 'Chubut', 'C√≥rdoba',
    'Corrientes', 'Entre R√≠os', 'Formosa', 'Jujuy', 'La Pampa', 'La Rioja',
    'Mendoza', 'Misiones', 'Neuqu√©n', 'R√≠o Negro', 'Salta', 'San Juan',
    'San Luis', 'Santa Cruz', 'Santa Fe', 'Santiago del Estero',
    'Tierra del Fuego', 'Tucum√°n'
  ];

  console.log('\n‚ö†Ô∏è  Provincias sin datos en la base:');
  const missing = expectedProvinces.filter(p => !finalProvinces.includes(p));
  if (missing.length > 0) {
    missing.forEach(p => console.log(`  - ${p}`));
  } else {
    console.log('  Todas las provincias tienen datos ‚úÖ');
  }

  await prisma.$disconnect();
  console.log('\nüéâ Normalizaci√≥n completada!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error:', e);
    process.exit(1);
  });
